{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markdown","content","handledChange","bind","assertThisInitialized","rawMarkup","marked","sanitize","__html","event","change","target","value","setState","react_default","a","createElement","className","react_textarea_autosize_esm_browser","onChange","dangerouslySetInnerHTML","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQA6DeA,cArDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAU,CAACC,QAAS,qbAExBT,EAAKU,cAAgBV,EAAKU,cAAcC,KAAnBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACrBA,EAAKa,UAAYb,EAAKa,UAAUF,KAAfV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KANHA,2EAWd,IAAIa,EAAYC,IAAOX,KAAKI,MAAMC,SAASC,QAAS,CAACM,UAAU,IAC/D,MAAO,CAAEC,OAAQH,yCAGPI,GACV,IAAOC,EAASf,KAAKI,MAAMC,SAC3BU,EAAOT,QAAUQ,EAAME,OAAOC,MAC9BjB,KAAKkB,SAAS,CAACb,SAAUU,qCAGzB,OACFI,EAAAC,EAAAC,cAAA,OAAKC,UAAY,sDACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,eAAhB,yBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,iBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qFACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,uBAAf,kBACFH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACED,UAAY,WACZL,MAASjB,KAAKI,MAAMC,SAASC,QAC7BkB,SAAYxB,KAAKO,kBAKpBY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gFACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,eAAhB,UACAH,EAAAC,EAAAC,cAAA,OAAKI,wBAA2BzB,KAAKU,UAAUV,KAAKI,MAAMC,SAASC,qBA1C9DoB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ff8afe6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport marked from 'marked';\nimport TextareaAutosize from 'react-textarea-autosize';\n\n\n\n\nclass App extends React.Component{\n  constructor(props){\n      super(props)\n      this.state = {\n          markdown: {content: \"# Sample Markdown Heading\\n\\nEdit or replace this\\n-----------\\n\\n### Another deeper heading\\n\\nParagraphs are separated by a blank line.\\n\\nLeave 2 spaces at the end of a line to do a  line break\\n\\nText attributes *italic*, **bold**,\\n`monospace`, ~~strikethrough~~ .\\n\\nUnordered list:\\n\\n  * apples\\n  * oranges\\n  * pears\\n\\nNumbered list:\\n\\n  1. apples\\n  2. oranges\\n  3. pears\\n\\n---\\n\\n#### Created by:\\n***Noel Miranda***\"}\n      }\n      this.handledChange = this.handledChange.bind(this)\n      this.rawMarkup = this.rawMarkup.bind(this)\n\n  }\n  \n  rawMarkup() {\n      let rawMarkup = marked(this.state.markdown.content, {sanitize: true});\n      return { __html: rawMarkup }\n    }\n\n  handledChange(event){\n      const  change = this.state.markdown;\n      change.content = event.target.value;\n      this.setState({markdown: change})\n  }\n  render(){\n      return(\n    <div className = \" container-fluid background justify-content-center\">\n        <h1 className = \"titulo mt-5\">Markdown Live Preview</h1>\n        <hr className = \"line mx-auto\"/>     \n           \n           <div className=\"row  m-1 justify-content-center\">\n            \n            <div className=\" textMarkdown col-md-5  flex-column  justify-content-center mb-md-5  rounded-left\">\n            <h3 className= \"enterTitleText mt-4\" >Enter Markdown</h3>\n          <form>                                         \n              <TextareaAutosize\n                className = \"textArea\"\n                value = {this.state.markdown.content}\n                onChange = {this.handledChange} \n              />                \n          </form>\n\n             </div>\n             <div className=\" resultArea  col-md-5 flex-column justify-content-center  mb-5 rounded-right\">\n             <h3 className = \"result mt-4\">Result</h3>\n             <div dangerouslySetInnerHTML = {this.rawMarkup(this.state.markdown.content)} />\n             </div>\n           </div>\n                     \n      </div>\n      )\n  }\n}\n\n\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}